.\" Copyright (c) 2019, Oracle.  All rights reserved.
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" SPDX-License-Identifier: GPL-2.0+
.\" %%%LICENSE_END
.TH IOCTL-XFS-GETBMAP 2 2019-04-11 "XFS"
.SH NAME
ioctl_xfs_getbmap \- query extent information for an open file
.SH SYNOPSIS
.br
.B #include <xfs/xfs_fs.h>
.PP
.BI "int ioctl(int " fd ", XFS_IOC_GETBMAP, struct getbmap *" arg );
.PP
.BI "int ioctl(int " fd ", XFS_IOC_GETBMAPA, struct getbmap *" arg );
.PP
.BI "int ioctl(int " fd ", XFS_IOC_GETBMAPX, struct getbmapx *" arg );
.SH DESCRIPTION
Get the block map for a segment of a file in an XFS file system.
The mapping information is conveyed in a structure of the following form:
.PP
.in +4n
.nf
struct getbmap {
	__s64   bmv_offset;
	__s64   bmv_block;
	__s64   bmv_length;
	__s32   bmv_count;
	__s32   bmv_entries;
};
.fi
.in
.PP
The
.B XFS_IOC_GETBMAPX
ioctl uses a larger version of that structure:
.PP
.in +4n
.nf
struct getbmapx {
	__s64   bmv_offset;
	__s64   bmv_block;
	__s64   bmv_length;
	__s32   bmv_count;
	__s32   bmv_entries;
	__s32   bmv_iflags;
	__s32   bmv_oflags;
	__s32   bmv_unused1;
	__s32   bmv_unused2;
};
.fi
.in
.PP
All sizes and offsets in the structure are in units of 512 bytes.
.PP
The first structure in the array is a header and the remaining structures in
the array contain block map information on return.
The header controls iterative calls to the command and should be filled out as
follows:
.TP
.B bmv_offset
The file offset of the area of interest in the file.
.TP
.B bmv_length
The length of the area of interest in the file.
If this value is set to -1, the length of the interesting area is the rest of
the file.
.TP
.B bmv_count
The length of the array, including this header.
.TP
.B bmv_entries
The number of entries actually filled in by the call.
This does not need to be filled out before the call.
.TP
.B bmv_iflags
For the
.B XFS_IOC_GETBMAPX
function, this is a combination of the following flags:
.RS 0.4i
.TP
.B BMV_IF_ATTRFORK
Return information about the extended attribute fork.
.TP
.B BMV_IF_PREALLOC
Return information about unwritten pre-allocated segments.
.TP
.B BMV_IF_DELALLOC
Return information about delayed allocation reservation segments.
.TP
.B BMV_IF_NO_HOLES
Do not return information about holes.
.RE
.PD 1

.PP
On return from a call, the header is updated so that the command can be
reused to obtain more information without re-initializing the structures.
The remainder of the array will be filled out by the call as follows:

.TP
.B bmv_offset
File offset of segment.
.TP
.B bmv_block
Physical starting block of segment.
If this is -1, then the segment is a hole.
.TP
.B bmv_length
Length of segment.
.TP
.B bmv_oflags
The
.B XFS_IOC_GETBMAPX
function will fill this field with a combination of the following flags:
.RS 0.4i
.TP
.B BMV_OF_PREALLOC
The segment is an unwritten pre-allocation.
.TP
.B BMV_OF_DELALLOC
The segment is a delayed allocation reservation.
.TP
.B BMV_OF_LAST
This segment is the last in the file.
.TP
.B BMV_OF_SHARED
This segment shares blocks with other files.
.RE
.PD 1
.PP
The
.B XFS_IOC_GETBMAPA
command is identical to
.B XFS_IOC_GETBMAP
except that information about the attribute fork of the file is returned.
.SH RETURN VALUE
On error, \-1 is returned, and
.I errno
is set to indicate the error.
.PP
.SH ERRORS
Error codes can be one of, but are not limited to, the following:
.TP
.B EFAULT
The kernel was not able to copy into the userspace buffer.
.TP
.B EFSBADCRC
Metadata checksum validation failed while performing the query.
.TP
.B EFSCORRUPTED
Metadata corruption was encountered while performing the query.
.TP
.B EINVAL
One of the arguments was not valid.
.TP
.B EIO
An I/O error was encountered while performing the query.
.TP
.B ENOMEM
There was insufficient memory to perform the query.
.SH CONFORMING TO
This API is specific to XFS filesystem on the Linux kernel.
.SH SEE ALSO
.BR ioctl (2)
